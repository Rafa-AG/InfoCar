package com.ralba.infocarapp;

import androidx.test.ext.junit.runners.AndroidJUnit4;

import com.ralba.infocarapp.models.CarEntity;
import com.ralba.infocarapp.models.CarModel;
import com.ralba.infocarapp.views.MyApplication;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Array;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import static org.junit.Assert.assertEquals;

@RunWith(AndroidJUnit4.class)
public class ModelTest {

    private CarModel model;
    private CarEntity car;
    private String id;

    @Before
    public void setUp(){
        model = new CarModel();
        car = new CarEntity();
        car.setId("1");
        car.setBrand("Seat");
        car.setModel("León");
        car.setHP("120");
        car.setDescription("Coche muy útil tanto en ciudad como en carretera.");
        car.setMotorType("Gasolina");
        car.setLaunchDate("05/12/2001");
        car.setReprogrammable(false);
        car.setImage("");
        model.insertCar(car);
        id = model.getAllSummarize().get(0).getId();
    }

    @Test
    public void insertCar(){
        assertEquals(true, this.model.insertCar(this.car));
    }

    @Test
    public void updateCar(){
        this.car.setReprogrammable(true);
        this.car.setModel("Ibiza");
        assertEquals(true, this.model.updateCar(this.car));
    }

    @Test
    public void deleteCar(){
        assertEquals(true, this.model.deleteCarById(id));
    }

    @Test
    public void getAllCars(){
        assertEquals(id, this.model.getAllSummarize().get(0).getId());
    }

    @Test
    public void getCarById(){
        assertEquals(id, this.model.getCarById(id).getId());
        assertEquals(this.car.getBrand(), this.model.getCarById(id).getBrand());
    }

    @Test
    public void getMotorTypes(){
        ArrayList<String> list = new ArrayList<>();
        list.add(MyApplication.getContext().getString(R.string.motor_type));
        list.add(MyApplication.getContext().getString(R.string.add_motor_type));
        list.add("Gasolina");
        assertEquals(list, this.model.getAllMotorTypes());
    }

    @Test
    public void filterCar(){
        ArrayList<CarEntity> carList = new ArrayList<>();
        carList.add(this.car);
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy");
        try{
            assertEquals(carList.get(0).getBrand(), this.model.getAllByFilter("Seat", "Gasolina", date.parse("05/12/2001")).get(0).getBrand());
            assertEquals(carList.get(0).getBrand(), this.model.getAllByFilter("", "", date.parse("01/01/2021")).get(0).getBrand());
        }catch (ParseException ex){
            ex.printStackTrace();
        }
        assertEquals(carList.get(0).getBrand(), this.model.getAllByFilter("", "", null).get(0).getBrand());
        assertEquals(carList.get(0).getBrand(), this.model.getAllByFilter("Seat", "", null).get(0).getBrand());
        assertEquals(carList.get(0).getBrand(), this.model.getAllByFilter("Seat", "Gasolina", null).get(0).getBrand());
        assertEquals(0, this.model.getAllByFilter("Audi", "A5", null).size());
    }

}
